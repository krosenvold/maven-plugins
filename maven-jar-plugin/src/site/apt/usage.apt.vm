 ------
 Usage
 ------
 Jerome Lacoste
 Dennis Lundberg
 Olivier Lamy
 ------
 2011-08-17
 ------

 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

 ~~ NOTE: For help with the syntax of this file, see:
 ~~ http://maven.apache.org/doxia/references/apt-format.html

Usage

  Some brief examples on how to use this plugin. If you want to use advanced
  configurations you should have a look at the 
  {{{./index.html#Examples}Example section}}.
  documentation for
  {{{http://maven.apache.org/shared/maven-archiver/}Maven Archiver}}.

  To handle archiving this version of Maven JAR Plugin uses
  {{{http://maven.apache.org/shared/maven-archiver/index.html}Maven Archiver}} ${mavenArchiverVersion}.

  <<Note:>> Originally, this plugin was meant to sign JARs as well. As of version 2.3, the corresponding goals are no
  longer supported and users are advised to use the dedicated
  {{{http://maven.apache.org/plugins/maven-jarsigner-plugin/}Maven Jarsigner Plugin}} instead. As of the
  current version 2.5, the corresponding goals were removed.


* How to build a JAR file

  If the packaging of your project is set to 'jar', this plugin is executed
  whenever it passes the "package" phase. The following is a simple example
  of a project which should produce a 'jar' as an artifact.  

+----------+
<project>
  ...
  <groupId>com.mycompany.project</groupId>
  <artifactId>core</artifactId>
  <version>1.0-SNAPSHOT</version>
  ...
</project>
+----------+

  The packing 'jar' type is not needed to mentioned, cause 'jar' is the default packaging type.  
  Apart from the above you need to create some real classes which should be located within
  <<<src/main/java>>>. If you need some resources (for example property files) as well they 
  should be located in <<<src/main/resources>>>. Now we can create a 'jar' file by using the 
  command below:

+-----------------+
mvn package
+-----------------+

  In your project's <<<target>>> directory you'll able to see the generated jar file which is named like:
  'core-1.0-SNAPSHOT.jar'. The resulting 'jar' file contains the compiled java class files as well as
  the files from <<<src/main/resources>>> which have been copied into <<<target/classes>>>.

  Usually there is no need to mentioned the 'maven-jar-plugin' explicit cause it's bound to
  the {{{http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html}Maven Build Life Cylce}}.

  For full documentation, click {{{./plugin-info.html}here}}.
